// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	// NOTE: I decided to create three separate methods (one for each command) to
	// keep from overloading the message types with an enumeration that performed
	// different operations. This allows for a very EXPLICIT contract for the
	// client to follow.
	Start(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Process, error)
	Stop(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Status, error)
	Stat(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Status, error)
	// I don't like the naming of the return stream here but I opted to go with a
	// shortend command name and CommandOutput is self-describing though more
	// verbose than I usually like.
	Output(ctx context.Context, in *Process, opts ...grpc.CallOption) (CommandService_OutputClient, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) Start(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Process, error) {
	out := new(Process)
	err := c.cc.Invoke(ctx, "/protobuf.CommandService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) Stop(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.CommandService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) Stat(ctx context.Context, in *Process, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protobuf.CommandService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandServiceClient) Output(ctx context.Context, in *Process, opts ...grpc.CallOption) (CommandService_OutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandService_ServiceDesc.Streams[0], "/protobuf.CommandService/Output", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandServiceOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CommandService_OutputClient interface {
	Recv() (*CommandOutput, error)
	grpc.ClientStream
}

type commandServiceOutputClient struct {
	grpc.ClientStream
}

func (x *commandServiceOutputClient) Recv() (*CommandOutput, error) {
	m := new(CommandOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	// NOTE: I decided to create three separate methods (one for each command) to
	// keep from overloading the message types with an enumeration that performed
	// different operations. This allows for a very EXPLICIT contract for the
	// client to follow.
	Start(context.Context, *Command) (*Process, error)
	Stop(context.Context, *Process) (*Status, error)
	Stat(context.Context, *Process) (*Status, error)
	// I don't like the naming of the return stream here but I opted to go with a
	// shortend command name and CommandOutput is self-describing though more
	// verbose than I usually like.
	Output(*Process, CommandService_OutputServer) error
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) Start(context.Context, *Command) (*Process, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedCommandServiceServer) Stop(context.Context, *Process) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedCommandServiceServer) Stat(context.Context, *Process) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (UnimplementedCommandServiceServer) Output(*Process, CommandService_OutputServer) error {
	return status.Errorf(codes.Unimplemented, "method Output not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CommandService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).Start(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Process)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CommandService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).Stop(ctx, req.(*Process))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Process)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.CommandService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).Stat(ctx, req.(*Process))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandService_Output_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Process)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommandServiceServer).Output(m, &commandServiceOutputServer{stream})
}

type CommandService_OutputServer interface {
	Send(*CommandOutput) error
	grpc.ServerStream
}

type commandServiceOutputServer struct {
	grpc.ServerStream
}

func (x *commandServiceOutputServer) Send(m *CommandOutput) error {
	return x.ServerStream.SendMsg(m)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _CommandService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _CommandService_Stop_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _CommandService_Stat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Output",
			Handler:       _CommandService_Output_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
